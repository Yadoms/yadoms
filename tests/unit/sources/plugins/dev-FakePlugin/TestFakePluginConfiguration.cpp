#include "stdafx.h"
#include <boost/test/unit_test.hpp>
#include <boost/filesystem.hpp>

// Includes needed to compile tested classes
#include "../../../../sources/plugins/dev-FakePlugin/FakePluginConfiguration.h"

BOOST_AUTO_TEST_SUITE(TestFakePluginConfiguration)

const boost::shared_ptr<shared::CDataContainer> Conf = shared::CDataContainer::make(std::string(
    "{"
	"\"EnumParameter\": \"EnumValue1\""
	"}"));


const std::string DefaultPackageInJson = "{\n"
"  \"type\": \"dev-fakePlugin\",\n"
"  \"version\": \"@PLUGIN_VERSION@\",\n"
"  \"author\": \"SÃ©bastien GALLOU\",\n"
"  \"url\": \"https://github.com/Yadoms/yadoms/wiki/FakePlugin\",\n"
"  \"credits\": \"\",\n"
"  \"supportedPlatforms\": \"all\",\n"
"  \"dependencies\": {\n"
"    \"yadoms\": {\n"
"      \"minimumVersion\": \"2.4.0-beta.1\"\n"
"    }\n"
"  },\n"
"  \"configurationSchema\": {\n"
"    \"StringParameter\": {\n"
"      \"type\": \"string\"\n"
"    },\n"
"    \"BoolParameter\": {\n"
"      \"type\": \"bool\",\n"
"      \"defaultValue\": \"false\"\n"
"    },\n"
"    \"IntParameter\": {\n"
"      \"type\": \"int\",\n"
"      \"defaultValue\": \"258\"\n"
"    },\n"
"    \"DecimalParameter\": {\n"
"      \"type\": \"decimal\",\n"
"      \"defaultValue\": \"25.3\"\n"
"    },\n"
"    \"EnumParameter\": {\n"
"      \"type\": \"enum\",\n"
"      \"values\": {\n"
"        \"EnumValue1\": \"\",\n"
"        \"EnumValue2\": \"\",\n"
"        \"EnumValue3\": \"\"\n"
"      },\n"
"      \"defaultValue\": \"EnumValue2\"\n"
"    },\n"
"    \"MySection\": {\n"
"      \"type\": \"section\",\n"
"      \"content\": {\n"
"        \"SubIntParameter\": {\n"
"          \"type\": \"int\",\n"
"          \"defaultValue\": \"65535\"\n"
"        },\n"
"        \"SubStringParameter\": {\n"
"          \"type\": \"string\"\n"
"        }\n"
"      }\n"
"    },\n"
"    \"ConditionalParameter\": {\n"
"      \"type\": \"string\",\n"
"      \"show\": {\n"
"        \"__Binding__\": {\n"
"          \"type\": \"system\",\n"
"          \"query\": \"platformIsWindows\"\n"
"        }\n"
"      }\n"
"    }\n"
"  },\n"
"  \"supportManuallyDeviceCreation\": \"true\",\n"
"  \"supportDeviceRemovedNotification\": \"true\",\n"
"  \"enumerations\": {\n"
"    \"EFakeControllerValues\": {\n"
"      \"name\": \"\",\n"
"      \"values\": {\n"
"        \"Stop\": \"\",\n"
"        \"Run\": \"\",\n"
"        \"Back\": \"\",\n"
"        \"Left\": \"\",\n"
"        \"Right\": \"\"\n"
"      }\n"
"    }\n"
"  },\n"
"  \"recipientFields\": {\n"
"    \"address\": {\n"
"      \"type\": \"string\",\n"
"      \"regex\": \"\"\n"
"    },\n"
"    \"zipcode\": {\n"
"      \"type\": \"string\",\n"
"      \"regex\": \"^(F-)?((2[A|B])|[0-9]{2})[0-9]{3}$\"\n"
"    },\n"
"    \"mms\": {\n"
"      \"type\": \"bool\",\n"
"      \"defaultValue\": \"true\"\n"
"    }\n"
"  },\n"
"  \"extraQueries\": {\n"
"    \"simpleCommand\": {\n"
"      \"iconClass\": \"fa fa-bolt\"\n"
"    },\n"
"    \"textDataCommand\": {\n"
"      \"iconClass\": \"fa fa-edit\",\n"
"      \"commandData\": {\n"
"        \"testValue\": {\n"
"          \"type\": \"string\"\n"
"        }\n"
"      }\n"
"    },\n"
"    \"numericDataCommand\": {\n"
"      \"iconClass\": \"fa fa-edit\",\n"
"      \"commandData\": {\n"
"        \"testValue\": {\n"
"          \"type\": \"int\"\n"
"        }\n"
"      }\n"
"    },\n"
"    \"dataBindingCommand\": {\n"
"      \"iconClass\": \"fa fa-sitemap\",\n"
"      \"commandData\": {\n"
"        \"networkInterface\": {\n"
"          \"type\": \"enum\",\n"
"          \"values\": {\n"
"            \"__Binding__\": {\n"
"              \"type\": \"system\",\n"
"              \"query\": \"networkInterfaces\"\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    },\n"
"    \"dataBindingPluginCommand\": {\n"
"      \"iconClass\": \"fa fa-rocket\",\n"
"      \"commandData\": {\n"
"        \"dynamicSection\": {\n"
"          \"type\": \"section\",\n"
"          \"content\": {\n"
"            \"__Binding__\": {\n"
"              \"type\": \"plugin\",\n"
"              \"query\": \"test\"\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    },\n"
"    \"changePluginStateMessage\": {\n"
"      \"iconClass\": \"fa fa-recycle\",\n"
"      \"commandData\": {\n"
"        \"newStateMessage\": {\n"
"          \"type\": \"string\"\n"
"        }\n"
"      }\n"
"    },\n"
"    \"asyncEQwithProgression\": {\n"
"      \"iconClass\": \"fa fa-upload\",\n"
"      \"commandData\": {\n"
"        \"fileContent\": {\n"
"          \"type\": \"file\",\n"
"          \"filter\": \".txt\"\n"
"        }\n"
"      }\n"
"    }\n"
"  },\n"
"  \"deviceConfiguration\": {\n"
"    \"staticConfigurationSchema\": {\n"
"      \"schemas\": {\n"
"        \"fakeConfigurableDevice\": {\n"
"          \"types\": {\n"
"            \"fakeConfigurableDeviceType\": {\n"
"              \"canBeCreatedManually\": \"false\"\n"
"            },\n"
"            \"anotherFakeConfigurableDeviceType\": {\n"
"              \"canBeCreatedManually\": \"true\"\n"
"            }\n"
"          },\n"
"          \"content\": {\n"
"            \"CounterDivider2\": {\n"
"              \"type\": \"int\",\n"
"              \"defaultValue\": \"2\",\n"
"              \"minimumValue\": \"1\",\n"
"              \"maximumValue\": \"10\"\n"
"            },\n"
"            \"MySection\": {\n"
"              \"type\": \"section\",\n"
"              \"content\": {\n"
"                \"SubIntParameter\": {\n"
"                  \"type\": \"int\",\n"
"                  \"defaultValue\": \"65535\"\n"
"                },\n"
"                \"SubStringParameter\": {\n"
"                  \"type\": \"string\"\n"
"                },\n"
"                \"SubComboParameter\": {\n"
"                  \"type\": \"comboSection\",\n"
"                  \"content\": {\n"
"                    \"first\": {\n"
"                      \"type\": \"section\"\n"
"                    },\n"
"                    \"second\": {\n"
"                      \"type\": \"section\"\n"
"                    },\n"
"                    \"third\": {\n"
"                      \"type\": \"section\"\n"
"                    }\n"
"                  }\n"
"                }\n"
"              }\n"
"            }\n"
"          }\n"
"        }\n"
"      }\n"
"    },\n"
"    \"dynamicConfigurationSchema\": \"true\"\n"
"  }\n"
"}";


BOOST_AUTO_TEST_CASE(ReadFakePluginDefaultConfiguration)
{
	std::string configPath = "../../../sources/plugins/dev-FakePlugin/package.in.json";
	// Need to copy the package.json file from fakePlugin, needed by initializeWith method to get default configuration
	if (!boost::filesystem::exists(configPath)) {
		configPath = "../../../../sources/plugins/dev-FakePlugin/package.in.json";
		if (!boost::filesystem::exists(configPath)) {
			configPath = "temp_package.in.json";
			std::ofstream out("temp_package.in.json");
			out << DefaultPackageInJson;
			out.close();
		}
	}

	CFakePluginConfiguration cfg;
	cfg.initializeWith(Conf, boost::filesystem::path(configPath));

	BOOST_CHECK_EQUAL(cfg.getEnumParameter(), static_cast<EEnumType>(kEnumValue1));
}

BOOST_AUTO_TEST_SUITE_END()