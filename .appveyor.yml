# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

# version format
version: 1.0.{build}

# Build worker image (VM template)
image: Visual Studio 2019

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Win32

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# Add pre-compiled dependencies in cache
cache:  
  - extra_libs\boost_1_70_0 -> '.appveyor.yml'
  - extra_libs\poco-1.9.4-all -> '.appveyor.yml'
  - extra_libs\openssl-1.0.2s -> '.appveyor.yml'
  - extra_libs\protobuf-3.10.1 -> '.appveyor.yml'
  - extra_libs\swig-3.0.12 -> '.appveyor.yml'
  #- extra_libs\pgsql-9.6.1 -> '.appveyor.yml'
  - extra_libs\gammu-1.37.4 -> '.appveyor.yml'

# scripts that run after cloning repository
install:
  # Remove not wanted PostgreSQL pre-installed versions from the Appveyor VM
  - ps: echo "Remove not wanted PostgreSQL pre-installed versions from the Appveyor VM..."
  - ps: |
     $uninstall64 = gci "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" | foreach { gp $_.PSPath } | ? { $_ -match "PostgreSQL" } | select UninstallString
     echo $uninstall64
     foreach ( $uninstallString in $uninstall64.UninstallString ) {
        if (Test-Path "$uninstallString") {
            echo "Uninstall $uninstallString..."
            start-process "$uninstallString" "--mode unattended" -Wait
        } else {
            $alternativeUninstallString = "$uninstallString" -replace "-postgis-", "-postgis-bundle-"
            if (Test-Path "$alternativeUninstallString") {
                echo "Uninstall $alternativeUninstallString..."
                start-process "$alternativeUninstallString" "--mode unattended" -Wait
            } else {
                echo "Fail to uninstall $uninstallString"
            }
        }
     }
  # Download extra libs
  - ps: echo "Download extra libs..."
  - ps: if (!(Test-Path 'extra_libs')) { mkdir 'extra_libs' }
  - ps: pushd extra_libs
  - ps: if (!(Test-Path 'boost_1_70_0')) { Invoke-WebRequest http://yadoms.com/appveyor_build/boost_1_70_0-build.7z -OutFile boost.7z; 7z x boost.7z -bso0 }
  - ps: if (!(Test-Path 'poco-1.9.4-all')) { Invoke-WebRequest http://yadoms.com/appveyor_build/poco-1.9.4-all-build.7z -OutFile poco.7z; 7z x poco.7z -bso0 }
  - ps: if (!(Test-Path 'openssl-1.0.2s')) { Invoke-WebRequest http://yadoms.com/appveyor_build/openssl-1.0.2s-build.7z -OutFile openssl.7z; 7z x openssl.7z -bso0 }
  - ps: if (!(Test-Path 'swig-3.0.12')) { Invoke-WebRequest http://yadoms.com/appveyor_build/swig-3.0.12-build.7z -OutFile swig.7z; 7z x swig.7z -bso0 }
  - ps: if (!(Test-Path 'protobuf-3.10.1')) { Invoke-WebRequest http://yadoms.com/appveyor_build/protobuf-3.10.1-build.7z -OutFile protobuf.7z; 7z x protobuf.7z -bso0 }
  - ps: if (!(Test-Path 'pgsql')) { Invoke-WebRequest http://yadoms.com/appveyor_build/postgresql-9.6.2-3-windows-binaries.zip -OutFile pgsql.zip; 7z x pgsql.zip -bso0 }
  - ps: if (!(Test-Path 'gammu-1.37.4')) { Invoke-WebRequest http://yadoms.com/appveyor_build/gammu-1.37.4-build.7z -OutFile gammu.7z; 7z x gammu.7z -bso0 }
  - ps: rm *.7z
  - ps: popd    
  - ps: echo "[END] install"

# scripts to run before build
before_build:
  - ps: $yadomsVersion = (Select-String -Path sources\server\changelog.md -Pattern '^### (.*)$')[0] | Foreach-Object {$_.Matches} | Foreach-Object {$_.Groups[1].Value}
  - ps: Write-Host "Yadoms version is $yadomsVersion"
  - ps: $env:tagYadomsVersionName = $yadomsVersion
  - ps: $env:tagYadomsVersionNameSpecificBranch = "$yadomsVersion-" + $env:APPVEYOR_REPO_BRANCH
  - ps: echo $env:tagYadomsVersionName
  - ps: echo $env:tagYadomsVersionNameSpecificBranch
  - ps: |
        If (($env:DEPLOY_ALL_BRANCHES -eq "true") -And ($env:APPVEYOR_REPO_BRANCH -ne "master")) {
             Update-AppveyorBuild -Version "$($env:tagYadomsVersionNameSpecificBranch)"
          } Else {
             Update-AppveyorBuild -Version "$($env:tagYadomsVersionName)"
          }
    
  
  # Yadoms configuration file
  - ps: cmake --version
  - ps: echo "Create Yadoms configuration file CMakeListsUserConfig.txt..."
  - ps: $cd_for_cmake="$pwd".Replace("\", "/")
  - ps: echo $cd_for_cmake
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(BOOST_ROOT "' + $cd_for_cmake + '/extra_libs/boost_1_70_0")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(POCO_ROOT "' + $cd_for_cmake + '/extra_libs/poco-1.9.4-all")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(OPENSSL_ROOT "' + $cd_for_cmake + '/extra_libs/openssl-1.0.2s")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PROTOBUF_ROOT "' + $cd_for_cmake + '/extra_libs/protobuf-3.10.1")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(SWIG_ROOT "' + $cd_for_cmake + '/extra_libs/swig-3.0.12")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PostgreSQL_ROOT "' + $cd_for_cmake + '/extra_libs/pgsql")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PostgreSQL_INCLUDE_DIR "' + $cd_for_cmake + '/extra_libs/pgsql/include")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PostgreSQL_LIBRARY_DIR "' + $cd_for_cmake + '/extra_libs/pgsql/lib")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(GAMMU_ROOT "' + $cd_for_cmake + '/extra_libs/gammu-1.37.4")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PYTHON27_ROOT "C:/Python27")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PYTHON27_USE_SOURCES OFF)')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PYTHON3_ROOT "C:/Python38")')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PYTHON3_USE_SOURCES OFF)')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(COTIRE_USE ON)')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(COTIRE_USE_UNITY ON)')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(PYTHON_USE_SOURCES OFF)')
  - ps: Add-Content 'sources/CMakeListsUserConfig.txt' ('set(USE_NSIS ON)')
  - ps: cat 'sources/CMakeListsUserConfig.txt'

  # Create solution
  - ps: echo "Create solution..."
  - cmd: cmake_windows.cmd
  
  
build: off
  # Use custom build
  
build_script:
  # Build and create installer
  - ps: pushd projects
  - ps: echo 'Build...'
  - ps: msbuild shared/all_unity.vcxproj /p:Configuration=$env:configuration /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  
# scripts to run before deployment
before_deploy:
  - ps: echo 'Finalize output...'
  - ps: cp ../config/yadoms.ini ../builds/$env:configuration/
  - ps: echo 'Create packages...'
  - ps: msbuild PACKAGE.vcxproj /p:Configuration=$env:configuration /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  - ps: popd
  - ps: ls 'builds/package'
  #generate update package
  - ps: New-Item package -type directory
  - ps: Move-Item builds\$env:configuration .\package\package
  - ps: Copy-Item update\scripts\update.cmd .\package\
  
  #   get version and last commit date
  - ps: $gitDate = git --git-dir=.git log -1 --format=%cI 
  - ps: Write-Host "Generating package.zip for Yadoms $yadomsVersion release on $gitDate"
  - ps: cd package
  - ps: $content = Get-Content '..\distribution\package.json.in'
  - ps: $content = $content -replace "__version__", $yadomsVersion
  - ps: $content = $content -replace "__gitdate__", $gitDate
  - ps: Out-File -InputObject $content -FilePath .\package.json -Encoding UTF8
  - ps: Copy-Item ..\sources\server\changelog.md .\
  - ps: Get-ChildItem * -Include *.ilk -Recurse | Remove-Item
  - ps: Get-ChildItem * -Include yadoms.ini -Recurse | Remove-Item
  - ps: 7z a -tzip ..\update-package-Windows.zip .\
  - ps: cd ..
  
  - ps: |
     $packageFile = Get-ChildItem "builds/package" -Name -Filter *.exe
     Push-AppveyorArtifact builds/package/$packageFile -FileName $packageFile -DeploymentName 'Yadoms installer'
     $packageFile = Get-ChildItem "builds/package" -Name -Filter *.zip
     Push-AppveyorArtifact builds/package/$packageFile -FileName $packageFile -DeploymentName 'Yadoms portable'
     $packageFile = Get-ChildItem "." -Name -Filter *.zip
     Push-AppveyorArtifact $packageFile -FileName $packageFile -DeploymentName 'Yadoms Update package'

#deploy for master branch
deploy:
  - provider: GitHub
    tag: $env:tagYadomsVersionName
    auth_token:
        secure: W10mJgzdj5g4fpebdUPhPXZScKaFUq0Jl5ly2FcLu2quQMR1r5mgPxAxv6uBSQoo # your encrypted token from GitHub
    draft: true
    force_update: true                #overwrite already existing file
    on:
        branch: master                 # release from master branch only

  - provider: GitHub
    tag: $(env:tagYadomsVersionNameSpecificBranch)
    auth_token:
        secure: W10mJgzdj5g4fpebdUPhPXZScKaFUq0Jl5ly2FcLu2quQMR1r5mgPxAxv6uBSQoo # your encrypted token from GitHub
    draft: true
    force_update: true                #overwrite already existing file
    on:
        DEPLOY_ALL_BRANCHES: true
  
  - provider: GitHub
    tag: $(tagYadomsVersionNameSpecificBranch)
    auth_token:
        secure: W10mJgzdj5g4fpebdUPhPXZScKaFUq0Jl5ly2FcLu2quQMR1r5mgPxAxv6uBSQoo # your encrypted token from GitHub
    draft: true
    force_update: true                #overwrite already existing file
    on:
        DEPLOY_ALL_BRANCHES: true
  
  - provider: GitHub
    auth_token:
        secure: W10mJgzdj5g4fpebdUPhPXZScKaFUq0Jl5ly2FcLu2quQMR1r5mgPxAxv6uBSQoo # your encrypted token from GitHub
    draft: true
    force_update: true                #overwrite already existing file
    on:
        DEPLOY_ALL_BRANCHES: true
  
  
notifications:
  - provider: Email
    subject: 'Build {{status}}: {{projectName}}, branch {{branch}}, {{buildVersion}}'
    to:
      - '{{commitAuthorEmail}}'
    on_build_status_changed: true
