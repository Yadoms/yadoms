name: Binaries generation

on: push

jobs:
  linux:
    name : Generate for Linux
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Yadoms build script
      uses: Yadoms/build-yadoms-action@v4.0.1
      id: yadoms_build_step
      with:
          buildImage: ghcr.io/yadoms/build_for_linux:latest
          registry: ghcr.io
          username: ${{ secrets.CONTAINER_GH_LOGIN }}
          password: ${{ secrets.CONTAINER_GH_TOKEN }}
          entrypoint: 'sh /entrypoint_docker.sh'
    - name: Upload logs on failure
      uses: actions/upload-artifact@v2
      if: failure()          
      with:
        name: linux-build_logs
        path: ./projects/external-libs/oatpp/src/oatpp_build-build/CMakeFiles/*.log
    - name: Get tag/branch name
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
    - name: Archive Linux-Binaries artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux-Binaries
        path: ./builds/package/Yadoms*
    - name: Archive Linux-Update artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Linux-Update
        path: ./builds/package/update*
    - name: Create Release (on Tag only)
      id: create_release
      uses: ncipollo/release-action@v1
      if: contains(github.ref, 'refs/tags/')
      with:
        tag: ${{ github.ref }}
        name: ${{ steps.vars.outputs.tag }}
        draft: true
        prerelease: true
        allowUpdates: true
        omitNameDuringUpdate: true
        replacesArtifacts: true
        artifacts: "./builds/package/*"
        token: ${{ secrets.GITHUB_TOKEN }}
    
  Synology218p:
    name : Generate for Synology 218+
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Yadoms build script
      uses: Yadoms/build-yadoms-action@v4.0.1
      id: yadoms_build_step
      with:
          buildImage: ghcr.io/yadoms/build_for_synology218p:latest
          registry: ghcr.io
          username: ${{ secrets.CONTAINER_GH_LOGIN }}
          password: ${{ secrets.CONTAINER_GH_TOKEN }}
          entrypoint: 'sh /entrypoint_docker.sh'
    - name: Upload logs on failure
      uses: actions/upload-artifact@v2
      if: failure()          
      with:
        name: Synology218p-build_logs
        path: ./projects/external-libs/oatpp/src/oatpp_build-build/CMakeFiles/*.log
    - name: Get tag/branch name
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
    - name: Archive Synology218p-Binaries artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Synology218p-Binaries
        path: ./builds/package/Yadoms*  
    - name: Archive Synology218p-Update artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Synology218p-Update
        path: ./builds/package/update*  
    - name: Create Release (on Tag only)
      id: create_release
      uses: ncipollo/release-action@v1
      if: contains(github.ref, 'refs/tags/')
      with:
        tag: ${{ github.ref }}
        name: ${{ steps.vars.outputs.tag }}
        draft: true
        prerelease: true
        allowUpdates: true
        omitNameDuringUpdate: true
        replacesArtifacts: true
        artifacts: "./builds/package/*"
        token: ${{ secrets.GITHUB_TOKEN }}     

  RapsberryPI:
    name : Generate for RaspberryPI (all versions)
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Yadoms build script
      uses: Yadoms/build-yadoms-action@v4.0.1
      id: yadoms_build_step
      with:
          buildImage: ghcr.io/yadoms/build_for_raspberrypi:latest
          registry: ghcr.io
          username: ${{ secrets.CONTAINER_GH_LOGIN }}
          password: ${{ secrets.CONTAINER_GH_TOKEN }}
          privileged: '--privileged'
          entrypoint: 'sh /entrypoint_docker.sh'
    - name: Upload logs on failure
      uses: actions/upload-artifact@v2
      if: failure()          
      with:
        name: RapsberryPI-build_logs
        path: ./projects/external-libs/oatpp/src/oatpp_build-build/CMakeFiles/*.log
    - name: Get tag/branch name
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
    - name: Archive RapsberryPI-Binaries artifacts
      uses: actions/upload-artifact@v2
      with:
        name: RapsberryPI-Binaries
        path: ./builds/package/Yadoms*
    - name: Archive  RapsberryPI-Update artifacts
      uses: actions/upload-artifact@v2
      with:
        name: RapsberryPI-Update
        path: ./builds/package/update*   
    - name: Create Release (on Tag only)
      id: create_release
      uses: ncipollo/release-action@v1
      if: contains(github.ref, 'refs/tags/')
      with:
        tag: ${{ github.ref }}
        name: ${{ steps.vars.outputs.tag }}
        draft: true
        prerelease: true
        allowUpdates: true
        omitNameDuringUpdate: true
        replacesArtifacts: true
        artifacts: "./builds/package/*"
        token: ${{ secrets.GITHUB_TOKEN }}     
        
  Windows:
    name : Generate for Windows
    runs-on: windows-2019
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Yadoms build script
      uses: Yadoms/build-yadoms-windows-action@v2.0.1
      id: yadoms_build_step
      with:
          buildImage: ghcr.io/yadoms/build_for_windows:latest
          registry: ghcr.io
          username: ${{ secrets.CONTAINER_GH_LOGIN }}
          password: ${{ secrets.CONTAINER_GH_TOKEN }}
          entrypoint: 'powershell.exe -Command C:\work\build-scripts\windows\entrypoint_docker.ps1'
    - name: Upload logs on failure
      uses: actions/upload-artifact@v2
      if: failure()          
      with:
        name: Windows-build_logs
        path: ./projects/external-libs/oatpp/src/oatpp_build-build/CMakeFiles/*.log
    - name: Get tag/branch name
      id: vars
      run: Write-Host "::set-output name=tag::$( $env:GITHUB_REF -replace '^refs/.*/(.*)$','$1')"
      shell: powershell
    - name: Archive Windows-Binaries artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Binaries
        path: ./builds/package/Yadoms*    
    - name: Archive Windows-Update package artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Windows-Update
        path: ./builds/package/update*    
    - name: Create Release (on Tag only)
      id: create_release
      uses: ncipollo/release-action@v1
      if: contains(github.ref, 'refs/tags/')
      with:
        tag: ${{ github.ref }}
        name: ${{ steps.vars.outputs.tag }}
        draft: true
        prerelease: true
        allowUpdates: true
        omitNameDuringUpdate: true
        replacesArtifacts: true
        artifacts: "./builds/package/*"
        token: ${{ secrets.GITHUB_TOKEN }}     

  RapsberryPI_ImageFR:
    name : Generate RaspberryPI image (French)
    runs-on: ubuntu-latest
    needs: RapsberryPI
    steps:
    - name: Get RapsberryPI-Binaries
      uses: actions/download-artifact@v2
      with:
        name: RapsberryPI-Binaries
        path: ./
    - name: Get tag/branch name
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
    - name: Yadoms build raspberryPI image FR script
      uses: Yadoms/build-yadoms-rpiimage-action@v1.0.1
      with:
        output_folder: $GITHUB_WORKSPACE/builds/pi_image
        language: fr
        branch_or_tag_name: 2020-12-02-raspbian-buster
    - name: Archive Raspbian-Lite-FR-Yadoms-Image artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Raspbian-Lite-FR-Yadoms-Image
        path: ./builds/pi_image/*.zip
    - name: Create Release (on Tag only)
      id: create_release
      uses: ncipollo/release-action@v1
      if: contains(github.ref, 'refs/tags/')
      with:
        tag: ${{ github.ref }}
        name: ${{ steps.vars.outputs.tag }}
        draft: true
        prerelease: true
        allowUpdates: true
        omitNameDuringUpdate: true
        replacesArtifacts: true
        artifacts: "./builds/pi_image/*.zip"
        token: ${{ secrets.GITHUB_TOKEN }}   
        
  RapsberryPI_ImageEN:
    name : Generate RaspberryPI image (English)
    runs-on: ubuntu-latest
    needs: RapsberryPI
    steps:
    - name: Get RapsberryPI-Binaries
      uses: actions/download-artifact@v2
      with:
        name: RapsberryPI-Binaries
        path: ./
    - name: Get tag/branch name
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
    - name: Yadoms build raspberryPI image EN script
      uses: Yadoms/build-yadoms-rpiimage-action@v1.0.1
      with:
        output_folder: $GITHUB_WORKSPACE/builds/pi_image
        language: en
        branch_or_tag_name: 2020-12-02-raspbian-buster
    - name: Archive Raspbian-Lite-EN-Yadoms-Image artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Raspbian-Lite-EN-Yadoms-Image
        path: ./builds/pi_image/*.zip
    - name: Create Release (on Tag only)
      id: create_release
      uses: ncipollo/release-action@v1
      if: contains(github.ref, 'refs/tags/')
      with:
        tag: ${{ github.ref }}
        name: ${{ steps.vars.outputs.tag }}
        draft: true
        prerelease: true
        allowUpdates: true
        omitNameDuringUpdate: true
        replacesArtifacts: true
        artifacts: "./builds/pi_image/*.zip"
        token: ${{ secrets.GITHUB_TOKEN }}   
        
