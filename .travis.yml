language: cpp
dist: trusty

# Fix Travis write errors on Clang builds. These write errors occurred after
# a Travis update to new Trusty images on Dec. 12th 2017. The reason for these
# write errors is unknown. Using the deprecated builds did not fix the problem.
# Setting 'filter_secrets: false' as suggested here
# https://github.com/travis-ci/travis-ci/issues/4704#issuecomment-321777557
# fixes the problem.
filter_secrets: false

#limit to git depth to 1 because don't use any git command in this script
git:
  depth: 1
  
before_install:
#g++ 4.9
- echo 'Installing G++ 4.9'
- sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
- sudo apt-get update -qq
- if [ "$CXX" = "g++" ]; then sudo apt-get install -qq g++-4.9; fi
- if [ "$CXX" = "g++" ]; then export CXX="g++-4.9" CC="gcc-4.9"; fi
- sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 50

# deps
- echo 'Installing some dependencies'
- sudo apt-get install libbz2-dev libudev-dev rpm

#make dir
- mkdir -p $HOME/depsBuild

#CMake
- echo 'Installing CMake 3.10.2'
- if [ ${GENERATE_CMAKE} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/yadoms/cmake-3.10.2-build.tar.bz2; else wget --no-verbose --no-check-certificate https://cmake.org/files/v3.10/cmake-3.10.2.tar.gz; fi
- if [ ${GENERATE_CMAKE} != true ]; then tar jxf cmake-3.10.2-build.tar.bz2; else tar zxf cmake-3.10.2.tar.gz; fi
- cd cmake-3.10.2
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/bootstrap" ; else ./bootstrap; fi
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/make"; else make; fi
- sudo make install
- cd ..
- if [ ${GENERATE_CMAKE} = true ]; then tar cjf cmake-3.10.2-build.tar.bz2 cmake-3.10.2; fi
- if [ ${GENERATE_CMAKE} = true ]; then curl --ftp-create-dirs -T cmake-3.10.2-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/yadoms/; fi
- if [ ${GENERATE_CMAKE} = true ]; then rm -f cmake-3.10.2-build.tar.bz2; fi

# boost
- echo 'Building Boost 1.65.1'
- if [ ${GENERATE_BOOST} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/boost_1_65_1-build.tar.bz2; else wget --no-verbose http://netcologne.dl.sourceforge.net/project/boost/boost/1.65.1/boost_1_65_1.tar.bz2; fi
- if [ ${GENERATE_BOOST} != true ]; then tar xjf boost_1_65_1-build.tar.bz2; else tar xjf boost_1_65_1.tar.bz2; fi
- cd boost_1_65_1
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/bootstrap"; else ./bootstrap.sh; fi
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/b2"; else ./b2 --with-atomic --with-chrono --with-date_time --with-filesystem --with-regex --with-thread --with-system link=static runtime-link=static cxxflags=-fPIC; fi
- cd ..
- if [ ${GENERATE_BOOST} = true ]; then tar cjf boost_1_65_1-build.tar.bz2 boost_1_65_1; fi
- if [ ${GENERATE_BOOST} = true ]; then curl --ftp-create-dirs -T boost_1_65_1-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_BOOST} = true ]; then rm -f boost_1_65_1-build.tar.bz2; fi
  
 # openssl
- echo 'Building OpenSSL'
- if [ ${GENERATE_OPENSSL} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/openssl-1.1.0g-build.tar.bz2; else wget --no-verbose https://www.openssl.org/source/openssl-1.1.0g.tar.gz; fi
- if [ ${GENERATE_OPENSSL} != true ]; then tar xjf openssl-1.1.0g-build.tar.bz2; else tar xzf openssl-1.1.0g.tar.gz; fi
- cd openssl-1.1.0g
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/configure"; else ./config --prefix=$HOME/depsBuild/openssl; fi
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/make"; else make; fi
- make install
- cd ..
- if [ ${GENERATE_OPENSSL} = true ]; then tar cjf openssl-1.1.0g-build.tar.bz2 openssl-1.1.0g; fi
- if [ ${GENERATE_OPENSSL} = true ]; then curl --ftp-create-dirs -T openssl-1.1.0g-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_OPENSSL} = true ]; then rm -f openssl-1.1.0g-build.tar.bz2; fi

# poco
- echo 'Building Poco 1.8.1-all'
- if [ ${GENERATE_POCO} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/poco-1.8.1-all-build.tar.bz2; else wget --no-verbose http://pocoproject.org/releases/poco-1.8.1/poco-1.8.1-all.tar.gz; fi
- if [ ${GENERATE_POCO} != true ]; then tar xjf poco-1.8.1-all-build.tar.bz2; else tar xzf poco-1.8.1-all.tar.gz; fi
- sudo apt-get install libssl-dev libgnutls-dev libopencv-gpu-dev
- cd poco-1.8.1-all/
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CC = -fPIC' >> build/config/Linux; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CXX = -fPIC' >> build/config/Linux; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure"; else ./configure --static --config=Linux --no-samples --no-tests --omit=CppUnit,CppUnit/WinTestRunner,Data,Data/SQLite,Data/ODBCData/MySQL,MongoDB,PageCompiler,PageCompiler/File2Page --include-path=$HOME/depsBuild/openssl/include --library-path=$HOME/depsBuild/openssl/lib; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/make"; else make; fi
- cd ..
- if [ ${GENERATE_POCO} = true ]; then tar cjf poco-1.8.1-all-build.tar.bz2 poco-1.8.1-all; fi
- if [ ${GENERATE_POCO} = true ]; then curl --ftp-create-dirs -T poco-1.8.1-all-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_POCO} = true ]; then rm -f poco-1.8.1-all-build.tar.bz2; fi


# protobuf
- echo 'Building Protobuf 3.4.1'
- sudo apt-get install autoconf automake libtool curl make g++ unzip
- if [ ${GENERATE_PROTOBUF} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/protobuf-3.4.1-build.tar.bz2; else wget --no-verbose https://github.com/google/protobuf/releases/download/v3.4.1/protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then tar xjf protobuf-3.4.1-build.tar.bz2 -C $HOME/depsBuild; else tar xzf protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd"; else cd protobuf-3.4.1; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/autogen"; else ./autogen.sh; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/configure"; else ./configure --enable-shared=no --prefix=$HOME/depsBuild/protobuf --with-pic; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make"; else make; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make install"; else make install; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/ldconfig"; else sudo ldconfig; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd.."; else cd ..; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then tar cjf protobuf-3.4.1-build.tar.bz2 -C $HOME/depsBuild protobuf; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then curl --ftp-create-dirs -T protobuf-3.4.1-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then rm -f protobuf-3.4.1-build.tar.bz2; fi

# gammu
- echo 'Building Gammu 1.38.4'
- sudo apt-get install pkg-config libmysqlclient-dev libpq-dev libcurl4-gnutls-dev libusb-1.0-0-dev libdbi0-dev libbluetooth-dev libgudev-1.0-dev libglib2.0-dev unixodbc-dev
- if [ ${GENERATE_GAMMU} != true ]; then wget --no-verbose -U 'Mozilla/5.0' ${YADOMS_DOWNLOAD_URL}/gammu-1.38.4-build.tar.bz2; else wget --no-verbose http://dl.cihar.com/gammu/releases/gammu-1.38.4.tar.gz; fi
- if [ ${GENERATE_GAMMU} != true ]; then tar xjf gammu-1.38.4-build.tar.bz2; else tar zxf gammu-1.38.4.tar.gz; fi
- cd gammu-1.38.4
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass mkdir build"; else mkdir build; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cd build"; else cd build; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cmake"; else ../cmake-3.10.2/bin/cmake -DBUILD_SHARED_LIBS=OFF ..; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass make"; else make; fi
- if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cd .."; else cd ..; fi
- cd ..
- if [ ${GENERATE_GAMMU} = true ]; then tar cjf gammu-1.38.4-build.tar.bz2 gammu-1.38.4; fi
- if [ ${GENERATE_GAMMU} = true ]; then curl --ftp-create-dirs -T gammu-1.38.4-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_GAMMU} = true ]; then rm -f gammu-1.38.4-build.tar.bz2; fi

# PCRE
- echo 'Installing PRCE'
- sudo apt-get install libpcre3 libpcre3-dev

 # SWIG
- echo 'Building SWIG'
- if [ ${GENERATE_SWIG} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/swig-3.0.12-build.tar.bz2; else wget --no-verbose http://prdownloads.sourceforge.net/swig/swig-3.0.12.tar.gz; fi
- if [ ${GENERATE_SWIG} != true ]; then tar xjf swig-3.0.12-build.tar.bz2; else tar xzf swig-3.0.12.tar.gz; fi
- cd swig-3.0.12
- if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/configure"; else ./configure; fi
- if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/make"; else make; fi
- sudo make install
- cd ..
- if [ ${GENERATE_SWIG} = true ]; then tar cjf swig-3.0.12-build.tar.bz2 swig-3.0.12; fi
- if [ ${GENERATE_SWIG} = true ]; then curl --ftp-create-dirs -T swig-3.0.12-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_SWIG} = true ]; then rm -f swig-3.0.12-build.tar.bz2; fi

# Python
- sudo apt-get install python-dev

# PostgreSQL
- echo 'Building PostgreSQL'
- if [ ${GENERATE_POSTGRESQL} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/postgresql-9.6.2-build.tar.bz2; else wget --no-verbose https://ftp.postgresql.org/pub/source/v9.6.2/postgresql-9.6.2.tar.bz2; fi
- if [ ${GENERATE_POSTGRESQL} != true ]; then tar xjf postgresql-9.6.2-build.tar.bz2; else tar xjf postgresql-9.6.2.tar.bz2; fi
- cd postgresql-9.6.2
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/configure"; else ./configure; fi
- cd src/interfaces/libpq
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/make"; else make; fi
- cd ../../../..
- if [ ${GENERATE_POSTGRESQL} = true ]; then tar cjf postgresql-9.6.2-build.tar.bz2 postgresql-9.6.2; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then curl --ftp-create-dirs -T postgresql-9.6.2-build.tar.bz2 -u ${FTP_USER}:${FTP_PASSWORD} ${YADOMS_UPLOAD_URL}/; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then rm -f postgresql-9.6.2-build.tar.bz2; fi

script:
# Yadoms configuration file
- echo 'Configuring Yadoms CMakeListsUserConfig.txt'
- echo 'set(ALTERNATIVE_CMAKE_ROOT "'$PWD'/cmake-3.10.2")' > sources/CMakeListsUserConfig.txt
- echo 'set(BOOST_ROOT "'$PWD'/boost_1_65_1")' >> sources/CMakeListsUserConfig.txt
- echo 'set(POCO_ROOT "'$PWD'/poco-1.8.1-all")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_ROOT "'$HOME'/depsBuild/protobuf")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_PROTOC_EXECUTABLE "'$HOME'/depsBuild/protobuf/bin/protoc")' >> sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_INSTALLED_TO_CUSTOM_DIRECTORY ON)' >> sources/CMakeListsUserConfig.txt
- echo 'set(OPENSSL_ROOT "'$HOME'/depsBuild/openssl")' >> sources/CMakeListsUserConfig.txt
- echo 'set(DEBUG_WITH_GCC OFF)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_PKGCONFIG ON)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_SOURCES OFF)' >> sources/CMakeListsUserConfig.txt
- echo 'set(PostgreSQL_ROOT ' >> sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/postgresql-9.6.2/src/interfaces/libpq"' >> sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/postgresql-9.6.2/src/include")' >> sources/CMakeListsUserConfig.txt
- echo 'set(GAMMU_ROOT "'$PWD'/gammu-1.38.4")' >> sources/CMakeListsUserConfig.txt
- echo 'set(SWIG_ROOT "'$PWD'/swig-3.0.12")' >> sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE ON)' >> sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE_UNITY ON)' >> sources/CMakeListsUserConfig.txt
- echo 'Result:'
- cat sources/CMakeListsUserConfig.txt

# Yadoms
- echo 'Generating makefile'
- sh cmake_linux.sh m
- cd projects
- echo 'Building Yadoms'
- make all_unity
- cd ..

