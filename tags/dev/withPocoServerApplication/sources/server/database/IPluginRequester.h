#pragma once

#include "entities/Entities.h"


namespace database { 

   class IPluginRequester
   {
   public:
      //--------------------------------------------------------------
      /// \brief           Add new plugin plugin instance
      /// \param [in] newPlugin   New plugin informations
      /// \return          harwareId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addInstance(const entities::CPlugin& newPlugin) = 0;

      //--------------------------------------------------------------
      /// \brief           Get plugin instance informations
      /// \param [in] pluginId   Plugin plugin instance Id
      /// \return          Plugin instance informations
      /// \throw           shared::exception::CEmptyResult if pluginId is unknown
      //--------------------------------------------------------------
      virtual boost::shared_ptr<entities::CPlugin> getInstance(int pluginId) = 0;    
      
      //--------------------------------------------------------------
      /// \brief           Get SYSTEM plugin instance informations
      /// \return          Plugin instance informations
      /// \throw           shared::exception::CEmptyResult if pluginId is unknown
      //--------------------------------------------------------------
      virtual boost::shared_ptr<entities::CPlugin> getSystemInstance() = 0;

      //--------------------------------------------------------------
      /// \brief           List all plugin instances
      /// \return          List of registered plugin instances
      //--------------------------------------------------------------
      virtual std::vector<boost::shared_ptr<entities::CPlugin> > getInstances() = 0;

      //--------------------------------------------------------------
      /// \brief           Update plugin instance informations
      /// \param [in]      updatedPluginData   New plugin instance information (only filled fields are updated)
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void updateInstance(const entities::CPlugin& updatedPluginData) = 0;

      //--------------------------------------------------------------
      /// \brief           Remove plugin instance
      /// \param [in] pluginId   Plugin instance Id
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void removeInstance(int pluginId) = 0;

      //--------------------------------------------------------------
      /// \brief           Disable the AtuoStart field for all instances of a plugin
      /// \param [in] pluginName    plugin to disable
      //--------------------------------------------------------------
      virtual void disableAutoStartForAllPluginInstances(const std::string& pluginName) = 0;

      //--------------------------------------------------------------
      /// \brief       Destructor
      //--------------------------------------------------------------
      virtual ~IPluginRequester()
      {
      }
   };
 
} //namespace database 
