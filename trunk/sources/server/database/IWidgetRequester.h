#pragma once

#include "entities/Widget.h"

class IWidgetRequester
{
public:
   //--------------------------------------------------------------
   /// \brief           Add new widget 
   /// \param [in]      newWidget   New widget informations
   /// \return          widgetId generated by the database
   /// \throw           CEmptyResultException if fails
   //--------------------------------------------------------------
   virtual int addWidget(boost::shared_ptr<CWidget> newWidget) = 0;

   //--------------------------------------------------------------
   /// \brief                 Get widget informations
   /// \param [in] widgetId   Widget Id
   /// \throw                 CInvalidParameterException if widgetId is unknown
   //--------------------------------------------------------------
   virtual boost::shared_ptr<CWidget> getWidget(int widgetId) = 0;

   //--------------------------------------------------------------
   /// \brief           List all widgets
   /// \return          List of registered widgets
   //--------------------------------------------------------------
   virtual std::vector<boost::shared_ptr<CWidget> > getWidgets() = 0;

   //--------------------------------------------------------------
   /// \brief           List all widgets instanciated in a page
   /// \param [in]      pageId   page  Id
   /// \return          List of registered widgets
   //--------------------------------------------------------------
   virtual std::vector<boost::shared_ptr<CWidget> > getWidgetsForPage(int pageId) = 0;
   
   //--------------------------------------------------------------
   /// \brief           Update widget informations
   /// \param [in]      widgetId   Widget  Id
   /// \param [in]      newConfiguration   New configuration
   /// \throw           CEmptyResultException if fails
   //--------------------------------------------------------------
   virtual void updateWidgetConfiguration(int widgetId, const std::string& newConfiguration) = 0;

   //--------------------------------------------------------------
   /// \brief           Update widget size
   /// \param [in]      widgetId   Widget  Id
   /// \param [in]      sizeX   the size X
   /// \param [in]      sizeX   the size Y
   /// \throw           CEmptyResultException if fails
   //--------------------------------------------------------------
   virtual void updateWidgetSize(int widgetId, int sizeX, int sizeY) = 0;
   
   //--------------------------------------------------------------
   /// \brief           Remove widget 
   /// \param [in] widgetId   Widget  Id
   /// \throw           CEmptyResultException if fails
   //--------------------------------------------------------------
   virtual void removeWidget(int widgetId) = 0;

   //--------------------------------------------------------------
   /// \brief       Destructor
   //--------------------------------------------------------------
   virtual ~IWidgetRequester()
   {
   }
};
