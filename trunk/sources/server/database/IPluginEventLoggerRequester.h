#pragma once

#include "entities/Entities.h"
#include <shared/StringExtension.h>


namespace database { 

   class IPluginEventLoggerRequester
   {
   public:
      //--------------------------------------------------------------
      /// \brief           Add new plugin event log entry
      /// \param [in]      pluginName   the plugin name
      /// \param [in]      pluginVersion   the plugin version
      /// \param [in]      pluginReleaseType   the plugin release type
      /// \param [in]      eventType   the event type
      /// \param [in]      message   the message associated to event
      /// \return          harwareId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addEvent(const std::string & pluginName, const std::string & pluginVersion, const shared::plugin::information::EReleaseType & pluginReleaseType, const entities::EEventType & eventType, const std::string & message = shared::CStringExtension::EmptyString) = 0;

      //--------------------------------------------------------------
      /// \brief           Add new plugin event log entry
      /// \param [in]      pluginLogEntry   new plugin event log entry
      /// \return          eventId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addEvent(const entities::CPluginEventLogger & pluginLogEntry) = 0;
      
      //--------------------------------------------------------------
      /// \brief           Get the events history for a plugin
      /// \param [in]      pluginName   the plugin name
      /// \param [in]      pluginVersion   the plugin version
      /// \param [in]      pluginReleaseType   the plugin release type
      /// \return          list of events
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual std::vector<boost::shared_ptr<entities::CPluginEventLogger> > getPluginEvents(const std::string & pluginName, const std::string & pluginVersion, const shared::plugin::information::EReleaseType & pluginReleaseType) = 0;

      //--------------------------------------------------------------
      /// \brief           Get the events history for a plugin
      /// \param [in]      pluginName   the plugin name
      /// \param [in]      pluginVersion   the plugin version
      /// \param [in]      pluginReleaseType   the plugin release type
      /// \param [in]      fromDate   the date from which to take data
      /// \return          list of events
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual std::vector<boost::shared_ptr<entities::CPluginEventLogger> > getPluginEvents(const std::string & pluginName, const std::string & pluginVersion, const shared::plugin::information::EReleaseType & pluginReleaseType, const boost::posix_time::ptime & fromDate) = 0;

      //--------------------------------------------------------------
      /// \brief       Destructor
      //--------------------------------------------------------------
      virtual ~IPluginEventLoggerRequester()
      {
      }
   };
 
} //namespace database 
