#pragma once

#include "entities/Entities.h"


namespace database { 

   class IPageRequester
   {
   public:

      //--------------------------------------------------------------
      /// \brief           Add new page 
      /// \param [in]      page   The page to add. If pageId if provided, then the id is kept
      /// \return          pageId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addPage(const entities::CPage & page) = 0;
               
      //--------------------------------------------------------------
      /// \brief           Add new page 
      /// \param [in]      name   The page name
      /// \param [in]      pageOrder  The page order
      /// \return          pageId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addPage(const std::string& name, const int pageOrder) = 0;

      //--------------------------------------------------------------
      /// \brief                 Get page informations
      /// \param [in] pageId     Page Id
      /// \throw                 CInvalidParameter if pageId is unknown
      //--------------------------------------------------------------
      virtual boost::shared_ptr<entities::CPage> getPage(int pageId) = 0;

      //--------------------------------------------------------------
      /// \brief           List all pages
      /// \return          List of registered pages
      //--------------------------------------------------------------
      virtual std::vector<const boost::shared_ptr<entities::CPage> > getPages() = 0;

      //--------------------------------------------------------------
      /// \brief           Update page informations
      /// \param [in]      pageId   Page  Id
      /// \param [in]      name   New name
      /// \param [in]      pageOrder  The page order
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void updatePage(int pageId, const std::string& name, const int pageOrder) = 0;

      //--------------------------------------------------------------
      /// \brief           Remove page 
      /// \param [in] pageId   Page  Id
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void removePage(int pageId) = 0;

      //--------------------------------------------------------------
      /// \brief           Remove all pages
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void removeAllPages() = 0;

      //--------------------------------------------------------------
      /// \brief       Destructor
      //--------------------------------------------------------------
      virtual ~IPageRequester()
      {
      }
   };

 
} //namespace database 
