#pragma once

#include "entities/Entities.h"
#include <shared/StringExtension.h>


namespace database { 

   class IEventLoggerRequester
   {
   public:
      //--------------------------------------------------------------
      /// \brief           Add new event log entry
      /// \param [in]      eventType   the event type
      /// \param [in]      optionalData   a free string
      /// \return          enventId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addEvent(const std::string & eventType, const std::string & optionalData) = 0;

      //--------------------------------------------------------------
      /// \brief           Add new event log entry
      /// \param [in]      logEntry   new event log entry
      /// \return          eventId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addEvent(const entities::CEventLogger & logEntry) = 0;
      
      //--------------------------------------------------------------
      /// \brief           Get the events history 
      /// \return          list of events
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual std::vector<boost::shared_ptr<entities::CEventLogger> > getEvents() = 0;

      //--------------------------------------------------------------
      /// \brief       Destructor
      //--------------------------------------------------------------
      virtual ~IEventLoggerRequester()
      {
      }
   };
 
} //namespace database 
