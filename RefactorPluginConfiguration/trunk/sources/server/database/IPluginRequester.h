#pragma once

#include "entities/Entities.h"


namespace database { 

   class IPluginRequester
   {
   public:
      //--------------------------------------------------------------
      /// \brief           Add new plugin plugin instance
      /// \param [in] newPlugin   New plugin informations
      /// \return          harwareId generated by the database
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual int addPlugin(boost::shared_ptr<entities::CPlugin> newPlugin) = 0;

      //--------------------------------------------------------------
      /// \brief           Get plugin informations
      /// \param [in] pluginId   Plugin plugin instance Id
      /// \throw           CInvalidParameterException if pluginId is unknown
      //--------------------------------------------------------------
      virtual boost::shared_ptr<entities::CPlugin> getPlugin(int pluginId) = 0;

      //--------------------------------------------------------------
      /// \brief           List all plugin plugin instances
      /// \param [in] evenDeleted   if true, returns deleted plugins too
      /// \return          List of registered plugin instances
      //--------------------------------------------------------------
      virtual std::vector<boost::shared_ptr<entities::CPlugin> > getPlugins(bool evenDeleted = false) = 0;

      //--------------------------------------------------------------
      /// \brief           Update plugin informations
      /// \param [in] pluginId   Plugin plugin instance Id
      /// \param [in] newConfiguration   New configuration
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void updatePluginConfiguration(int pluginId, const std::string& newConfiguration) = 0;

      //--------------------------------------------------------------
      /// \brief           Remove plugin plugin instance
      /// \param [in] pluginId   Plugin plugin instance Id
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void removePlugin(int pluginId) = 0;

      //--------------------------------------------------------------
      /// \brief           Enable/disable plugin plugin instance
      /// \param [in] pluginId   Plugin plugin instance Id
      /// \param [in] enable       true to flag as enable, false to flag as disable
      /// \throw           shared::exception::CEmptyResult if fails
      //--------------------------------------------------------------
      virtual void enableInstance(int pluginId, bool enable) = 0;

      //--------------------------------------------------------------
      /// \brief           Disable all instance of a plugin
      /// \param [in] pluginName    plugin to disable
      //--------------------------------------------------------------
      virtual void disableAllPluginInstance(const std::string& pluginName) = 0;

      //--------------------------------------------------------------
      /// \brief       Destructor
      //--------------------------------------------------------------
      virtual ~IPluginRequester()
      {
      }
   };
 
} //namespace database 
